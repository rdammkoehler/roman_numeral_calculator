#define BUFFER_SIZE 100
#test values_3999_return_ok
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "MMMCMXCIX");
	validate(buffer);
	ck_assert_str_eq(buffer, "MMMCMXCIX");
#test values_over_3999_return_ok
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "MMMM");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test chars_must_be_valid_roman_numerals
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "A");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test chars_must_be_uppercase
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "iii");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test arabic_numbers_arent_roman_numerals
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "123");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test empty_strings_arent_roman_numbers
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test four_m_error
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "MMMM");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test four_c_error
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "CCCC");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test four_d_error
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "DDDD");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test four_l_error
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "LLLL");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test four_x_error
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "XXXX");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test four_v_error
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "VVVV");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
#test four_i_error
	char buffer[BUFFER_SIZE];
	strcpy(buffer, "IIII");
	validate(buffer);
	ck_assert_str_eq(buffer, "ERROR");
